import unittest
from unittest import TestCase
from rengine.exercises import StrengthExercise



from rengine.workout_plan import * 


class TestGetStrengthExerciseQueue(TestCase):
    def test_barbell_full_body_workout(self):
        seq = get_strenth_exercise_queue(MuscleGroup.ALL, [EquipmentAvailable.BARBELL, EquipmentAvailable.PULLUP_BAR, EquipmentAvailable.DIP_BAR])
        self.assertTrue(seq.get().exercise_name in ["Barbell Squat", "Romanian Deadlift"], "First strength exercise should be either barbell squat or barbell deadlift.")
        self.assertTrue(seq.get().exercise_name in ["Barbell Squat", "Romanian Deadlift"], "Second strength exercise should be either barbell squat or barbell deadlift.")
        self.assertTrue(seq.get().exercise_name == "Barbell Bench Press", "Third strength exercise should be barbell bench press.")
        self.assertTrue(seq.get().exercise_name in ["Bent-Over Barbell Row", "Barbell Shoulder Press", "Weighted Pull-Ups", "Weighted Dips"], "Fourth strength exercise should be one of the following: Bent-Over Barbell Row, Barbell Shoulder Press, Weighted Pull-Ups,  or Weighted Dips")
        self.assertTrue(seq.get().exercise_name in ["Bent-Over Barbell Row", "Barbell Shoulder Press", "Weighted Pull-Ups", "Weighted Dips"], "Five strength exercise should be one of the following: Bent-Over Barbell Row, Barbell Shoulder Press, Weighted Pull-Ups,  or Weighted Dips")
        self.assertTrue(seq.get().exercise_name in ["Bent-Over Barbell Row", "Barbell Shoulder Press", "Weighted Pull-Ups", "Weighted Dips"], "Sixth strength exercise should be one of the following: Bent-Over Barbell Row, Barbell Shoulder Press, Weighted Pull-Ups,  or Weighted Dips")
        self.assertTrue(seq.get().exercise_name in ["Bent-Over Barbell Row", "Barbell Shoulder Press", "Weighted Pull-Ups", "Weighted Dips"], "Seventh strength exercise should be one of the following: Bent-Over Barbell Row, Barbell Shoulder Press, Weighted Pull-Ups,  or Weighted Dips")
    def test_intialize_preset_strength_exercise(self):
        seq = get_strenth_exercise_queue(MuscleGroup.ALL, [EquipmentAvailable.BARBELL, EquipmentAvailable.PULLUP_BAR, EquipmentAvailable.DIP_BAR])
        for i in range(20):
            exercise = StrengthExercise(seq.get().exercise_name)

class TestBaseWorkoutPlan(TestCase):


    def setUp(self) -> None:
        workouts = [
            AutoGeneratedWorkout(60, [MuscleGroup.CHEST]),
            AutoGeneratedWorkout(60, [MuscleGroup.BACK]),
            AutoGeneratedWorkout(60, [MuscleGroup.CHEST])
        ]

        for workout in workouts:
            workout.create()
            workout
        self.plan = BaseWorkoutPlan(workouts)
        return super().setUp()


    def test_cummulative_load_property(self):

        self.assertGreater(self.plan.cummative_load_per_muscle_group[MuscleGroup.CHEST], self.plan.cummative_load_per_muscle_group[MuscleGroup.BACK], "There should be more chest exercises in total than back exercises.")
        self.assertEqual(self.plan.cummative_load_per_muscle_group[MuscleGroup.CALVES], 0, "There are no calf exercises in this plan so the load should be 0.")


    def test_unique_exercises_property(self):
        unique_exercises = []
        for workout in self.plan.workouts:
            for exercise in workout.workout:
                if exercise.exercise_name not in unique_exercises:
                    unique_exercises.append(exercise.exercise_name)
        self.assertSetEqual(set(unique_exercises), set(self.plan.unique_exercise_names))



class TestAutoGeneratedWorkoutPlan(TestCase):




    def test_functionality(self):
        workout_blueprint = [
            tuple(MuscleGroup.ALL),
            tuple(MuscleGroup.ALL),
            tuple(MuscleGroup.ALL),
            tuple(MuscleGroup.ALL)
        ]
        plan = AutoGeneratedWorkoutPlan(
            60, 
            workout_blueprint
        )

        plan.generate()
            

class TestPresetAGWPs(TestCase):

    WORKOUT_PLANS = (FullBodyWorkoutPlan,)

    def test_init_with_valid_n_days(self):
        for workout_plan in TestPresetAGWPs.WORKOUT_PLANS:
            for day_option in AUTO_GENERATED_WORKOUT_PLAN_SPLIT_CONFIG[workout_plan.WORKOUT_SPLIT]["muscles_worked_by_day"]:
                init_workout = workout_plan(60, day_option)

    def test_init_with_invalid_n_days(self):
        for workout_plan in TestPresetAGWPs.WORKOUT_PLANS:
            for day_option in set([i for i in range(8)]).difference(set(AUTO_GENERATED_WORKOUT_PLAN_SPLIT_CONFIG[workout_plan.WORKOUT_SPLIT]["muscles_worked_by_day"])):
                self.assertRaises(Exception, workout_plan, 60, day_option)

    def test_bad_config(self):
        self.assertRaises(Exception, PresetAGWP, 60, 4, {"muscles_worked_by_day": {2:(MuscleGroup.ALL)}})

    def test_generate(self):
        for workout_plan in TestPresetAGWPs.WORKOUT_PLANS:
            for day_option in AUTO_GENERATED_WORKOUT_PLAN_SPLIT_CONFIG[workout_plan.WORKOUT_SPLIT]["muscles_worked_by_day"]:
                init_workout = workout_plan(60, day_option)
                init_workout.generate()
                self.assertEqual(len(init_workout.workouts), day_option, f"{workout_plan.__name__} is incorrectly generating {str(len(init_workout.workouts))} when it should be generating {str(day_option)}")
                for workout in init_workout.workouts:
                    self.assertLessEqual(abs(workout.total_time - 60), 7.5, "A workout is not in the target range.")



        

                    



if __name__ == "__main__":
    unittest.main()
